from OpenGL.GL import *
from OpenGL.GLUT import *

#Routine~~~~~~~~~~~~~~~~~~~~~~~~~~~ Canvas Base ~~~~~~~~~~~~~~~~~~~~~~~~~~~

class MyCanvasBase(glcanvas.GLCanvas):
	def __init__(self, parent):
		glcanvas.GLCanvas.__init__(self, parent, -1)
		self.init = False
		# initial mouse position
		self.lastx = self.x = 0
		self.lasty = self.y = 0
		self.size = None
		self.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBackground)
		self.Bind(wx.EVT_SIZE, self.OnSize)
		self.Bind(wx.EVT_PAINT, self.OnPaint)
		self.Bind(wx.EVT_LEFT_DOWN, self.OnMouseDown)
		self.Bind(wx.EVT_LEFT_UP, self.OnMouseUp)
		self.Bind(wx.EVT_MOTION, self.OnMouseMotion)

	def OnEraseBackground(self, event):
		pass # Do nothing, to avoid flashing on MSW

	def OnSize(self, event):
		size = self.size = self.GetClientSize()
		if self.GetContext():
			self.SetCurrent()
			glViewport(0, 0, size.width, size.height)
		event.Skip()

	def OnPaint(self, event):
		dc = wx.PaintDC(self)
		self.SetCurrent()
		if not self.init:
			self.InitGL()
			self.init = True
		self.OnDraw()

	def OnMouseDown(self, evt):
		global drawmouse
		if drawmouse:
			self.CaptureMouse()
			self.x, self.y = self.lastx, self.lasty = evt.GetPosition()

	def OnMouseUp(self, evt):
		self.ReleaseMouse()

	def OnMouseMotion(self, evt):
		if evt.Dragging() and evt.LeftIsDown():
			self.lastx, self.lasty = self.x, self.y
			self.x, self.y = evt.GetPosition()
			self.Refresh(False)

#---------------------Draws GCode File  ------------------

class drawgcode(MyCanvasBase):
	def InitGL(self):
		global viewoxm
		global viewoxp
		global viewoym
		global viewoyp
		global viewozm
		global viewozp

		# set viewing Projection
		glMatrixMode(GL_PROJECTION)

		#glOrtho(-2.0, 2.0, -2.0, 2.0, 0.5, 4.0)
		glOrtho(viewoxm, viewoxp, viewoym, viewoyp, viewozm, viewozp)
		# position viewer
		glTranslatef(-30.0, -20.0, 0.0)

		# position object
		global drawmouse
		if drawmouse:
			glRotatef(self.y, 0.0, 1.0, 0.0)
			glRotatef(self.x, 1.0, 0.0, 0.0)
    
		# ---------------Setting below are from my original cube program

		# Move Right And Into The Screen
		#glTranslatef(0.0, 0.0, -2.0)

		# This Will Clear The Background Color To Black
		glClearColor(0.0, 0.0, 0.0, 0.0)

		# Enables Clearing Of The Depth Buffer
		glClearDepth(1.0)

		# The Type Of Depth Test To Do
		glDepthFunc(GL_LESS)

		# Enables Depth Testing
		glEnable(GL_DEPTH_TEST)

		# Enables Smooth Color Shading
		glShadeModel(GL_SMOOTH)

		glMatrixMode(GL_MODELVIEW)

	def OnDraw(self):

		global panleftenable
		global panrightenable
		global panupenable
		global pandownenable
		global panmm
		global redrawrun
		global redrawtext
		global viewoxm
		global viewoxp
		global viewoym
		global viewoyp
		global viewozm
		global viewozp
		global zoominenable
		global zoomoutenable
		global zoompercent
		global introcube
		gcode = '00'
		tempjunk = 0.0
		icord = 0.0
		jcord = 0.0
		pxcord = 0.0
		xcord = 0.0
		circx = 0.0
		circxstep = 0.0
		circxstepcord = 0.0
		circxendcord = 0.0
		pycord = 0.0
		ycord = 0.0
		circy = 0.0
		circystep = 0.0
		circystepcord = 0.0
		circyendcord = 0.0
		pzcord = 0.0
		zcord = 0.0
		zcirc = 0.0
		circradius = 0.0
		circstep = 0.1
		circangle1 = 0.0
		circangle2 = 0.0
		circanglestep = 0.0
		circcircum = 0.0
		circdegdist = 0.0
		circdegstep = 0.0
		circdeltax = 0.0
		circdeltay = 0.0
		circquad = 0.0
		tempangle = 0.0
		processfileok = True


		#clear the screen and the depth buffer
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

		if panleftenable == True:
			pan = panmm * -1
			glTranslatef(pan,0.0,0.0)
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
			glCallList(1)
			panleftenable = False

		if panrightenable == True:
			glTranslatef(panmm,0.0,0.0)
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
			glCallList(1)
			panrightenable = False

		if panupenable == True:
			glTranslatef(0.0,panmm,0.0)
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
			glCallList(1)
			panupenable = False

		if pandownenable == True:
			pan = panmm * -1
			glTranslatef(0.0,pan,0.0)
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
			glCallList(1)
			pandownenable = False

		if zoominenable == True:
			zoom = zoompercent/100.0
			glScalef(zoom,zoom,zoom)
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
			glCallList(1)
			zoominenable = False

		if zoomoutenable == True:
			zoom = 100.0/zoompercent
			glScalef(zoom,zoom,zoom)
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
			glCallList(1)
			zoomoutenable = False

		global drawrotdegno
		global doxrot        
		if doxrot:
			glRotatef(drawrotdegno, 1.0, 0.0, 0.0)
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
			glCallList(1)

		global doyrot        
		if doyrot:
			glRotatef(drawrotdegno, 0.0, 1.0, 0.0)
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
			glCallList(1)

		global dozrot        
		if dozrot:
			glRotatef(drawrotdegno, 0.0, 0.0, 1.0)
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
			glCallList(1)

    
		if redrawrun:
			#Use glNewList and glEndList calls to put drawing into a list
			#Benefit is that this time consuming gcode file processing is only done once
			#After this only very fast glClear and glCallList calls are required to do zooms, pans, & rotates
			glNewList(1, GL_COMPILE)
		
			#introduction code draws cube one time
			if introcube == True:
				# Start Drawing The Cube
				glBegin(GL_QUADS)

				# Set The Color To Blue
				glColor3f(0.0,10.0,0.0)
				# Top Right Of The Quad (Top)
				glVertex3f( 10.0, 5.0,-10.0)
				# Top Left Of The Quad (Top)
				glVertex3f(-10.0, 5.0,-10.0)
				# Bottom Left Of The Quad (Top)
				glVertex3f(-10.0, 5.0, 10.0)
				# Bottom Right Of The Quad (Top)
				glVertex3f( 10, 5.0, 10)

				# Set The Color To Orange
				glColor3f(10,5.0,0.0)
				# Top Right Of The Quad (Bottom)
				glVertex3f( 10,-5.0, 10)
				# Top Left Of The Quad (Bottom)
				glVertex3f(-10,-5.0, 10)
				# Bottom Left Of The Quad (Bottom)
				glVertex3f(-10,-5.0,-10)
				# Bottom Right Of The Quad (Bottom)
				glVertex3f( 10,-5.0,-10)

				# Set The Color To Red
				glColor3f(10,0.0,0.0)
				# Top Right Of The Quad (Front)
				glVertex3f( 10, 10, 5.0)
				# Top Left Of The Quad (Front)
				glVertex3f(-10, 10, 5.0)
				# Bottom Left Of The Quad (Front)
				glVertex3f(-10,-10, 5.0)
				# Bottom Right Of The Quad (Front)
				glVertex3f( 10,-10, 5.0)

				# Set The Color To Yellow
				glColor3f(10,10,0.0)
				# Bottom Left Of The Quad (Back)
				glVertex3f( 10,-10,-5.0)
				# Bottom Right Of The Quad (Back)
				glVertex3f(-10,-10,-5.0)
				# Top Right Of The Quad (Back)
				glVertex3f(-10, 10,-5.0)
				# Top Left Of The Quad (Back)
				glVertex3f( 10, 10,-5.0)

				# Set The Color To Blue
				glColor3f(0.0,0.0,10)
				# Top Right Of The Quad (Left)
				glVertex3f(-5.0, 10, 10)
				# Top Left Of The Quad (Left)
				glVertex3f(-5.0, 10,-10)
				# Bottom Left Of The Quad (Left)
				glVertex3f(-5.0,-10,-10)
				# Bottom Right Of The Quad (Left)
				glVertex3f(-5.0,-10, 10)

				# Set The Color To Violet
				glColor3f(10,0.0,10)
				# Top Right Of The Quad (Right)
				glVertex3f( 5.0, 10,-10)
				# Top Left Of The Quad (Right)
				glVertex3f( 5.0, 10, 10)
				# Bottom Left Of The Quad (Right)
				glVertex3f( 5.0,-10, 10)
				# Bottom Right Of The Quad (Right)
				glVertex3f( 5.0,-10,-10)
				# Done Drawing The Quad
				glEnd()
				introcube = False

			# Draw x-axis line.
			glBegin( GL_LINES )
			glColor3f( 1, 0, 0 )	
			glVertex3f( 0, 0, 0 )
			glVertex3f( 50, 0, 0 )
			glEnd( )
			# Draw number 50 on x-axis line.
			glRasterPos2f(50,-5)
			glutInit()
			A = 53
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, A)
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, 48)
	
			# Draw y-axis line.
			glColor3f( 0, 1, 0 )
			glBegin( GL_LINES )
			glVertex3f( 0, 0, 0 )
			glVertex3f( 0, 50, 0 )
			glEnd( )
			glRasterPos2f(-5,50)
			glutInit()
			A = 53
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, A)
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, 48)
	
			# Draw z-axis line.
			glColor3f( 0, 0, 1 )
			glBegin( GL_LINES )
			glVertex3f( 0, 0, 0 )
			glVertex3f( 0, 0, 50 )
			glEnd( )
			lineno = 1
			index = 0
			strno = ''
			#for i in range (1,5):
			while processfileok == True:
				string = redrawtext.GetLineText(lineno)
				if len(string) < 2:
					processfileok = False
				while index < len(string):
					letter = string[index]
					#print letter
					if letter == 'N':
						#print 'line number: '
						getno = True
						index = index + 1
						while getno == True:
							letter = string[index]
							if letter == ' ':
								if index < len(string):
									index = index + 1
							elif letter == '-' or letter == '.' or letter == '0' or letter == '1' or letter == '2' or letter == '3' or letter == '4' or letter == '5' or letter == '6' or letter == '7' or letter == '8' or letter == '9':
								strno = strno + letter
								if index < len(string):
									index = index + 1
							elif True:
								index = index - 1
								getno = False

							if index == len(string):
								getno = False
						linenon = strno
						strno = ''
						#print linenon
					elif letter == 'G':
						#print 'motion code: '
						getno = True
						index = index + 1
						while getno == True:
							letter = string[index]
							if letter == ' ':
								if index < len(string):
									index = index + 1
							elif letter == '-' or letter == '.' or letter == '0' or letter == '1' or letter == '2' or letter == '3' or letter == '4' or letter == '5' or letter == '6' or letter == '7' or letter == '8' or letter == '9':
								strno = strno + letter
								if index < len(string):
									index = index + 1
							elif True:
								index = index - 1
								getno = False

							if index == len(string):
								getno = False

						gcode = strno
						strno = ''
						#print gcode
					elif letter == 'X':
						#print 'x cord.: '
						getno = True
						index = index + 1
						while getno == True:
							letter = string[index]
							if letter == ' ':
								if index < len(string):
									index = index + 1
							elif letter == '-' or letter == '.' or letter == '0' or letter == '1' or letter == '2' or letter == '3' or letter == '4' or letter == '5' or letter == '6' or letter == '7' or letter == '8' or letter == '9':
								strno = strno + letter
								if index < len(string):
									index = index + 1
							elif True:
								index = index - 1
								getno = False

							if index == len(string):
								getno = False

						
						xcord = float(strno)
						strno = ''
						#print X cord
					elif letter == 'Y':
						#print 'Y cord.: '
						getno = True
						index = index + 1
						while getno == True:
							letter = string[index]
							if letter == ' ':
								if index < len(string):
									index = index + 1
							elif letter == '-' or letter == '.' or letter == '0' or letter == '1' or letter == '2' or letter == '3' or letter == '4' or letter == '5' or letter == '6' or letter == '7' or letter == '8' or letter == '9':
								strno = strno + letter
								if index < len(string):
									index = index + 1
							elif True:
								index = index - 1
								getno = False

							if index == len(string):
								getno = False

						ycord = float(strno)
						strno = ''
						#print ycord
					elif letter == 'Z':
						#print 'Z cord.: '
						getno = True
						index = index + 1
						while getno == True:
							letter = string[index]
							if letter == ' ':
								if index < len(string):
									index = index + 1
							elif letter == '-' or letter == '.' or letter == '0' or letter == '1' or letter == '2' or letter == '3' or letter == '4' or letter == '5' or letter == '6' or letter == '7' or letter == '8' or letter == '9':
								strno = strno + letter
								if index < len(string):
									index = index + 1
							elif True:
								index = index - 1
								getno = False

							if index == len(string):
								getno = False


						zcord = float(strno)
						strno = ''
						#print zcord
					elif letter == 'F':
						#print 'motion speed: '
						getno = True
						index = index + 1
						while getno == True:
							letter = string[index]
							if letter == ' ':
								if index < len(string):
									index = index + 1
							elif letter == '-' or letter == '.' or letter == '0' or letter == '1' or letter == '2' or letter == '3' or letter == '4' or letter == '5' or letter == '6' or letter == '7' or letter == '8' or letter == '9':
								strno = strno + letter
								if index < len(string):
									index = index + 1
							elif True:
								index = index - 1
								getno = False

							if index == len(string):
								getno = False

						fspeed = float(strno)
						strno = ''
						#print fspeed
					elif letter == 'I':
						getno = True
						index = index + 1
						while getno == True:
							letter = string[index]
							if letter == ' ':
								if index < len(string):
									index = index + 1
							elif letter == '-' or letter == '.' or letter == '0' or letter == '1' or letter == '2' or letter == '3' or letter == '4' or letter == '5' or letter == '6' or letter == '7' or letter == '8' or letter == '9':
								strno = strno + letter
								if index < len(string):
									index = index + 1
							elif True:
								index = index - 1
								getno = False

							if index == len(string):
								getno = False

						icord = float(strno)
						strno = ''
					elif letter == 'J':
						getno = True
						index = index + 1
						while getno == True:
							letter = string[index]
							if letter == ' ':
								if index < len(string):
									index = index + 1
							elif letter == '-' or letter == '.' or letter == '0' or letter == '1' or letter == '2' or letter == '3' or letter == '4' or letter == '5' or letter == '6' or letter == '7' or letter == '8' or letter == '9':
								strno = strno + letter
								if index < len(string):
									index = index + 1
							elif True:
								index = index - 1
								getno = False

							if index == len(string):
								getno = False

						jcord = float(strno)
						strno = ''
					elif letter == 'R':
						getno = True
						index = index + 1
						while getno == True:
							letter = string[index]
							if letter == ' ':
								if index < len(string):
									index = index + 1
							elif letter == '-' or letter == '.' or letter == '0' or letter == '1' or letter == '2' or letter == '3' or letter == '4' or letter == '5' or letter == '6' or letter == '7' or letter == '8' or letter == '9':
								strno = strno + letter
								if index < len(string):
									index = index + 1
							elif True:
								index = index - 1
								getno = False

							if index == len(string):
								getno = False

						circradius = float(strno)
						strno = ''

					elif letter == ' ':
						pass
					elif True:
						print letter
					index = index + 1

				lineno = lineno +1
				index = 0 

				if gcode == '00':
					glColor3f( 0.5, 1, 0.5 )
				elif gcode == '01' or gcode == '02' or gcode == '03':
					glColor3f( 1, 0.5, 0.5 )
				if gcode == '00' or gcode == '01':
					glBegin( GL_LINES )
					glVertex3f( pxcord, pycord, pzcord )
					glVertex3f( xcord, ycord, zcord )
					glEnd( )
				if gcode == '02':
					circxendcord = xcord
					circyendcord = ycord
					circx = pxcord + icord
					circy = pycord + jcord
					circdeltax = pxcord - circx
					circdeltay = jcord
					circradius = math.sqrt((circdeltax*circdeltax)+(circdeltay*circdeltay))
					circcircum = 2 * math.pi * circradius
					circdegdist = circcircum / 360.0
					circdegstep = circstep / circdegdist
					tempangle = math.acos(circdeltax/circradius)
					tempangle = math.degrees(tempangle)
				

					if circx > pxcord:
						if circy >= pycord:
							circquad = 180.0
							tempangle = tempangle - 90
							tempangle = 270 - tempangle
						if circy < pycord:
							circquad = 90
					if circx < pxcord:
						if circy > pycord:
							circquad = 270.0
							tempangle = 360 - tempangle
						if circy <= pycord:
							circquad = 0.0
					if circx == pxcord:
						if circy < pycord:
							circquad = 90.0
						if circy > pycord:
							circquad = 270.0
							tempangle = 270.0

					circangle1 = tempangle
					print circangle1

					circdeltax = xcord - circx
					tempangle = math.acos(circdeltax/circradius)
					tempangle = math.degrees(tempangle)

					if circx > xcord:
						if circy >= ycord:
							circquad = 180.0
							tempangle = tempangle - 90
							tempangle = 270 - tempangle
						if circy < ycord:
							circquad = 90
					if circx < xcord:
						if circy > ycord:
							circquad = 270.0
							tempangle = 360 - tempangle
						if circy <= ycord:
							circquad = 0.0
					if circx == xcord:
						if circy < ycord:
							circquad = 90.0
						if circy > ycord:
							circquad = 270.0
							tempangle = 270.0


					circangle2 = tempangle
					print circangle2
					circanglestep = circangle1
				
					while circanglestep < circangle2:
						circanglestep = circanglestep + circdegstep
						circxstep = circradius * math.cos(circanglestep * math.pi /180.0)
						circxstepcord = circx + circxstep
						circystep = circradius * math.sin(circanglestep * math.pi /180.0)
						circystepcord = circy + circystep
						xcord = circxstepcord
						ycord = circystepcord
						glBegin( GL_LINES )
						glVertex3f( pxcord, pycord, pzcord )
						glVertex3f( xcord, ycord, zcord )
						glEnd( )
						print circanglestep
						pxcord = xcord
						pycord = ycord
						pzcord = zcord

					xcord = circxendcord
					ycord = circyendcord

					glBegin( GL_LINES )
					glVertex3f( pxcord, pycord, pzcord )
					glVertex3f( xcord, ycord, zcord )
					glEnd( )

				if gcode == '03':
					circxendcord = xcord
					circyendcord = ycord
					circx = pxcord + icord
					circy = pycord + jcord
					circdeltax = pxcord - circx
					circdeltay = jcord
					circradius = math.sqrt((circdeltax*circdeltax)+(circdeltay*circdeltay))
					circcircum = 2 * math.pi * circradius
					circdegdist = circcircum / 360.0
					circdegstep = circstep / circdegdist
					tempangle = math.acos(circdeltax/circradius)
					tempangle = math.degrees(tempangle)
	

					if circx > pxcord:
						if circy >= pycord:
							circquad = 180.0
							tempangle = tempangle - 90
							tempangle = 270 - tempangle
						if circy < pycord:
							circquad = 90
					if circx < pxcord:
						if circy > pycord:
							circquad = 270.0
							tempangle = 360 - tempangle
						if circy <= pycord:
							circquad = 0.0
					if circx == pxcord:
						if circy < pycord:
							circquad = 90.0
						if circy > pycord:
							circquad = 270.0
							tempangle = 270.0

					circangle1 = tempangle
					print circangle1

					circdeltax = xcord - circx
					tempangle = math.acos(circdeltax/circradius)
					tempangle = math.degrees(tempangle)

					if circx > xcord:
						if circy >= ycord:
							circquad = 180.0
							tempangle = tempangle - 90
							tempangle = 270 - tempangle
						if circy < ycord:
							circquad = 90
					if circx < xcord:
						if circy > ycord:
							circquad = 270.0
							tempangle = 360 - tempangle
						if circy <= ycord:
							circquad = 0.0
					if circx == xcord:
						if circy < ycord:
							circquad = 90.0
						if circy > ycord:
							circquad = 270.0
							tempangle = 270.0

					circangle2 = tempangle
					print circangle2
					circanglestep = circangle1
				
					while circanglestep > circangle2:
						circanglestep = circanglestep - circdegstep
						circxstep = circradius * math.cos(circanglestep * math.pi /180.0)
						circxstepcord = circx + circxstep
						circystep = circradius * math.sin(circanglestep * math.pi /180.0)
						circystepcord = circy + circystep
						xcord = circxstepcord
						ycord = circystepcord
						glBegin( GL_LINES )					
						glVertex3f( pxcord, pycord, pzcord )
						glVertex3f( xcord, ycord, zcord )
						glEnd( )
						print circanglestep
						pxcord = xcord
						pycord = ycord
						pzcord = zcord

					xcord = circxendcord
					ycord = circyendcord

					glBegin( GL_LINES )					
					glVertex3f( pxcord, pycord, pzcord )
					glVertex3f( xcord, ycord, zcord )
					glEnd( )

				#print 'copy new coodinates to previous'
				pxcord = xcord
				pycord = ycord
				pzcord = zcord

				string = redrawtext.GetLineText(lineno)
				if len(string) < 2:
					processfileok = False
			glEndList()
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
			glCallList(1)

		if self.size is None:
			self.size = self.GetCleintSize()
		w, h = self.size
		w = max(w, 50.0)
		h = max(h, 50.0)
		#Gooder01 increased x,yscale number to 500 to get rotate
		#working when window is expanded larger, was not working
		#when the window was small
		xScale = 500 / w
		yScale = 500 / h
		
		global drawmouse
		if drawmouse:
			glRotatef((self.y - self.lasty) * yScale, 1.0, 0.0, 0.0);
			glRotatef((self.x - self.lastx) * xScale, 0.0, 1.0, 0.0);

		self.SwapBuffers()